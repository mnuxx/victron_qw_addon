blueprint:
  name: Qilowatt Mode Automation
  description: Automation to run every 2 seconds based on mode sensor
  domain: automation
  input:
    mode_sensor:
      name: Mode Sensor
      description: Select the sensor that provides the mode
      selector:
        entity:
          domain: sensor
    power_sensor:
      name: Power Sensor
      description: Select the sensor that provides the power value
      selector:
        entity:
          domain: sensor
  trigger:
    - platform: time_pattern
      seconds: /2
  action:
    - choose:
        - conditions:
            - condition: state
              entity_id: !input mode_sensor
              state: normal
          sequence:
            - service: script.normal
              data:
                power: "{{ states(input.power_sensor) }}"
        - conditions:
            - condition: state
              entity_id: !input mode_sensor
              state: savebattery
          sequence:
            - service: script.savebattery
              data:
                power: "{{ states(input.power_sensor) }}"
        - conditions:
            - condition: state
              entity_id: !input mode_sensor
              state: pvsell
          sequence:
            - service: script.pvsell
              data:
                power: "{{ states(input.power_sensor) }}"
        - conditions:
            - condition: state
              entity_id: !input mode_sensor
              state: sell
          sequence:
            - service: script.sell
              data:
                power: "{{ states(input.power_sensor) }}"
        - conditions:
            - condition: state
              entity_id: !input mode_sensor
              state: frrup
          sequence:
            - service: script.frrup
              data:
                power: "{{ states(input.power_sensor) }}"
        - conditions:
            - condition: state
              entity_id: !input mode_sensor
              state: buy
          sequence:
            - service: script.buy
              data:
                power: "{{ states(input.power_sensor) }}"
        - conditions:
            - condition: state
              entity_id: !input mode_sensor
              state: limitexport
          sequence:
            - service: script.limitexport
              data:
                power: "{{ states(input.power_sensor) }}"
